// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	handler "github.com/Livingpool/handler"
	mock "github.com/stretchr/testify/mock"
)

// MockPlayerPoolInterface is an autogenerated mock type for the PlayerPoolInterface type
type MockPlayerPoolInterface struct {
	mock.Mock
}

type MockPlayerPoolInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPlayerPoolInterface) EXPECT() *MockPlayerPoolInterface_Expecter {
	return &MockPlayerPoolInterface_Expecter{mock: &_m.Mock}
}

// AddPlayer provides a mock function with given fields: player
func (_m *MockPlayerPoolInterface) AddPlayer(player *handler.Player) error {
	ret := _m.Called(player)

	if len(ret) == 0 {
		panic("no return value specified for AddPlayer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*handler.Player) error); ok {
		r0 = rf(player)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPlayerPoolInterface_AddPlayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPlayer'
type MockPlayerPoolInterface_AddPlayer_Call struct {
	*mock.Call
}

// AddPlayer is a helper method to define mock.On call
//   - player *handler.Player
func (_e *MockPlayerPoolInterface_Expecter) AddPlayer(player interface{}) *MockPlayerPoolInterface_AddPlayer_Call {
	return &MockPlayerPoolInterface_AddPlayer_Call{Call: _e.mock.On("AddPlayer", player)}
}

func (_c *MockPlayerPoolInterface_AddPlayer_Call) Run(run func(player *handler.Player)) *MockPlayerPoolInterface_AddPlayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*handler.Player))
	})
	return _c
}

func (_c *MockPlayerPoolInterface_AddPlayer_Call) Return(_a0 error) *MockPlayerPoolInterface_AddPlayer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPlayerPoolInterface_AddPlayer_Call) RunAndReturn(run func(*handler.Player) error) *MockPlayerPoolInterface_AddPlayer_Call {
	_c.Call.Return(run)
	return _c
}

// GetPlayer provides a mock function with given fields: id
func (_m *MockPlayerPoolInterface) GetPlayer(id int) (*handler.Player, bool) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetPlayer")
	}

	var r0 *handler.Player
	var r1 bool
	if rf, ok := ret.Get(0).(func(int) (*handler.Player, bool)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *handler.Player); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*handler.Player)
		}
	}

	if rf, ok := ret.Get(1).(func(int) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockPlayerPoolInterface_GetPlayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlayer'
type MockPlayerPoolInterface_GetPlayer_Call struct {
	*mock.Call
}

// GetPlayer is a helper method to define mock.On call
//   - id int
func (_e *MockPlayerPoolInterface_Expecter) GetPlayer(id interface{}) *MockPlayerPoolInterface_GetPlayer_Call {
	return &MockPlayerPoolInterface_GetPlayer_Call{Call: _e.mock.On("GetPlayer", id)}
}

func (_c *MockPlayerPoolInterface_GetPlayer_Call) Run(run func(id int)) *MockPlayerPoolInterface_GetPlayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockPlayerPoolInterface_GetPlayer_Call) Return(_a0 *handler.Player, _a1 bool) *MockPlayerPoolInterface_GetPlayer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPlayerPoolInterface_GetPlayer_Call) RunAndReturn(run func(int) (*handler.Player, bool)) *MockPlayerPoolInterface_GetPlayer_Call {
	_c.Call.Return(run)
	return _c
}

// NewPlayer provides a mock function with given fields: answerStr
func (_m *MockPlayerPoolInterface) NewPlayer(answerStr string) *handler.Player {
	ret := _m.Called(answerStr)

	if len(ret) == 0 {
		panic("no return value specified for NewPlayer")
	}

	var r0 *handler.Player
	if rf, ok := ret.Get(0).(func(string) *handler.Player); ok {
		r0 = rf(answerStr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*handler.Player)
		}
	}

	return r0
}

// MockPlayerPoolInterface_NewPlayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewPlayer'
type MockPlayerPoolInterface_NewPlayer_Call struct {
	*mock.Call
}

// NewPlayer is a helper method to define mock.On call
//   - answerStr string
func (_e *MockPlayerPoolInterface_Expecter) NewPlayer(answerStr interface{}) *MockPlayerPoolInterface_NewPlayer_Call {
	return &MockPlayerPoolInterface_NewPlayer_Call{Call: _e.mock.On("NewPlayer", answerStr)}
}

func (_c *MockPlayerPoolInterface_NewPlayer_Call) Run(run func(answerStr string)) *MockPlayerPoolInterface_NewPlayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPlayerPoolInterface_NewPlayer_Call) Return(_a0 *handler.Player) *MockPlayerPoolInterface_NewPlayer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPlayerPoolInterface_NewPlayer_Call) RunAndReturn(run func(string) *handler.Player) *MockPlayerPoolInterface_NewPlayer_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePlayer provides a mock function with given fields: id
func (_m *MockPlayerPoolInterface) RemovePlayer(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for RemovePlayer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPlayerPoolInterface_RemovePlayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePlayer'
type MockPlayerPoolInterface_RemovePlayer_Call struct {
	*mock.Call
}

// RemovePlayer is a helper method to define mock.On call
//   - id int
func (_e *MockPlayerPoolInterface_Expecter) RemovePlayer(id interface{}) *MockPlayerPoolInterface_RemovePlayer_Call {
	return &MockPlayerPoolInterface_RemovePlayer_Call{Call: _e.mock.On("RemovePlayer", id)}
}

func (_c *MockPlayerPoolInterface_RemovePlayer_Call) Run(run func(id int)) *MockPlayerPoolInterface_RemovePlayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockPlayerPoolInterface_RemovePlayer_Call) Return(_a0 error) *MockPlayerPoolInterface_RemovePlayer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPlayerPoolInterface_RemovePlayer_Call) RunAndReturn(run func(int) error) *MockPlayerPoolInterface_RemovePlayer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPlayerPoolInterface creates a new instance of MockPlayerPoolInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPlayerPoolInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPlayerPoolInterface {
	mock := &MockPlayerPoolInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
